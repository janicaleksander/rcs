syntax = "proto3";

package types;

option go_package = "github.com/janicaleksander/bcs/proto";
import  "google/protobuf/timestamp.proto";

// ========================
// DATA MODELS
// ========================
message Error {
  string content = 1;
}

message PID {
  string address = 1;
  string id = 2;
}

message Role {
  string name = 1;
  uint64 ruleLevel = 2;
}

message Personal {
  string name = 1;
  string surname = 2;
}

message User {
  string id = 1;
  string email = 2;
  string password = 3;
  int32 rule_lvl = 4;
  google.protobuf.Timestamp las_time_online = 5;
  Personal personal = 6;
}

message Unit {
  string id = 1;
  string name = 2;
}

message Conversation{
  string id = 1;
  string senderID = 2;
  string receiverID = 3;
}

message Message{
  string id = 1;
  string senderID = 2;
  string conversationID =3;
  string content = 4;
  google.protobuf.Timestamp sent_at = 5;
}

message Device {
  string id =1;
  string name = 2;
  string owner =3;
  google.protobuf.Timestamp last_time_online = 5;
  int32 type = 4;
}

message Location{
  double latitude = 1;
  double longitude = 2;
}

message Task {
  string id = 1;
  string name = 2;
  string description = 3;
  int32 state =4;
  google.protobuf.Timestamp completionDate = 5;
  google.protobuf.Timestamp deadline = 6;

}

message Pin {
  string deviceID = 1;
  string ownerName =2;
  string ownerSurname =3;
  Location location = 4;
  google.protobuf.Timestamp lastOnline = 5;
}
// ========================
// ACTION MESSAGE
// ========================

message IsServerRunning {}

message ServerIsRunning {}

message Disconnect {
  string id =1;
}

message Ping{}

message Pong{}

message LoginUser {
  PID pid = 1;
  string email = 2;
  string password = 3;
}

message AcceptUserLogin {
  string userID = 1;
  int32 ruleLevel = 2;
}

message GetLoggedInUUID {
  PID pid = 1;
}
message LoggedInUUID {
  string id = 1;
}

message CreateUnit {
  Unit unit = 1;
  string userID = 2;
}

message AcceptCreateUnit {}

message GetAllUnits {}

message AllUnits {
  repeated Unit units = 1;
}

message LoginUnit {
  PID pid = 1;
  string unitID = 2;
}

message CreateUser{
  User user = 1 ;
}

message AcceptCreateUser{}

message GetUsersInUnit {
  string unitID = 1;
}

message UsersInUnit {
  repeated User users = 1;
}

message GetUserAboveLVL {
  int32 lower = 1;
  int32 upper = 2;
}

message UsersAboveLVL{
  repeated User users = 1;
}

message IsUserInUnit{
  string id =1;
}

message UserIsInUnit{
  string unitID = 1;
}

message AssignUserToUnit {
  string userID = 1;
  string unitID = 2;
}

message AcceptAssignUserToUnit{}

message DeleteUserFromUnit{
  string userID = 1;
  string unitID = 2;
}
message AcceptDeleteUserFromUnit{}

message RegisterClientInMessageService{
  string id =1;
  PID pid =2;
}

message AcceptRegisterClient{}

message CreateConversation{
  string id = 1;
  string senderID = 2;
  string receiverID = 3;
}

message AcceptCreateConversation{}

message ConversationSummary {
  string conversation_id = 1;
  string withID = 2;
  string nametag = 3;
  optional Message last_message = 4;
}


message GetUserConversations{
  string id = 1;
}

message UserConversations {
  repeated ConversationSummary convSummary = 1;
}

message SendMessage{
  string receiver = 1;
  Message message = 2;
}

message AcceptSend{}

message DeliverMessage{
  string receiver = 1;
  Message message =2;
}

message AcceptDeliver{}

message StoreMessage{
  Message message = 1;
}
message AcceptStoreMessage{}

message IsOnline{
  string userID = 1;
}

message Online{}

message Offline{}

message FillConversationID{
  string senderID = 1;
  string receiverID = 2;
}

message FilledConversationID{
  string id =1;
}

message HeartbeatTick{}

message Outbox{}

message Inbox {
  string withID =1;
}

message PresenceType {
  oneof Type {
    Outbox outbox = 1;
    Inbox inbox = 2;
  }
}

message GetPresence{
  string id = 1;
}

message Presence {
  PresenceType  presence= 1;
}

message UpdatePresence{
  string id = 1;
  PresenceType presence = 2;
}

message OpenAndLoadConversation{
  string userID =1;
  string receiverID=2;
  string conversationID =3;
}

message LoadConversation{
  string conversationID  = 1;
}

message LoadedConversation{
  repeated  Message messages = 1;
}

message GetUsersToNewConversation{
  string userID = 1;
}

message UsersToNewConversation{
  repeated User users = 1;
}

message HTTPSpawnDevice{
  string email = 1; //we have to check based on this is user is in unit -> success
  string password = 2;
}

message SpawnAndRunDevice {
  Device device =1;
}

message AcceptSpawnAndRunDevice{
  string userID =1;
  string deviceID =2;
  PID devicePID  =3;
}

message ConnectHDeviceToADevice{
  string deviceID =1;
  PID devicePID =2;
}

message AcceptConnectHtoA{}

message LoginUserReq {
  string email = 1;
  string password =2;
}

message UserRes{
  string name = 1;
  string surname = 2;
}

message LoginUserRes{
  string accessToken = 1;
  string userID = 2;
  string deviceID =3;
}


message AcceptUpdateLocationReq{}

message UpdateLocationRes{
  string message =1;
}

message UpdateLocationReq{
  Location location =1;
  string deviceID = 2;
}

message GetPins{
}

message Pins{
  repeated Pin pins = 1;
}

message GetCurrentTask {
  string deviceID = 1;
}

message CurrentTask{
  Task task = 1;
  string userID = 2;
}

message GetDeviceTypes {

}

message DeviceTypes {
  repeated string types =1;
}

message CreateDevice{
  Device device =1;
}

message AcceptCreateDevice{}

